// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package push_server

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson316682a0DecodePatreonInternalMicroservicesPushDeliveryServer(in *jlexer.Lexer, out *PushesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pushes":
			if in.IsNull() {
				in.Skip()
				out.Pushes = nil
			} else {
				in.Delim('[')
				if out.Pushes == nil {
					if !in.IsDelim(']') {
						out.Pushes = make([]PushResponse, 0, 0)
					} else {
						out.Pushes = []PushResponse{}
					}
				} else {
					out.Pushes = (out.Pushes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 PushResponse
					(v1).UnmarshalEasyJSON(in)
					out.Pushes = append(out.Pushes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodePatreonInternalMicroservicesPushDeliveryServer(out *jwriter.Writer, in PushesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pushes\":"
		out.RawString(prefix[1:])
		if in.Pushes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Pushes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PushesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodePatreonInternalMicroservicesPushDeliveryServer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PushesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodePatreonInternalMicroservicesPushDeliveryServer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PushesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodePatreonInternalMicroservicesPushDeliveryServer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PushesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodePatreonInternalMicroservicesPushDeliveryServer(l, v)
}
func easyjson316682a0DecodePatreonInternalMicroservicesPushDeliveryServer1(in *jlexer.Lexer, out *PushResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "push":
			if m, ok := out.Push.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Push.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Push = in.Interface()
			}
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "viewed":
			out.Viewed = bool(in.Bool())
		case "push_id":
			out.Id = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodePatreonInternalMicroservicesPushDeliveryServer1(out *jwriter.Writer, in PushResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"push\":"
		out.RawString(prefix)
		if m, ok := in.Push.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Push.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Push))
		}
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"viewed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Viewed))
	}
	{
		const prefix string = ",\"push_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PushResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodePatreonInternalMicroservicesPushDeliveryServer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PushResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodePatreonInternalMicroservicesPushDeliveryServer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PushResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodePatreonInternalMicroservicesPushDeliveryServer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PushResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodePatreonInternalMicroservicesPushDeliveryServer1(l, v)
}
