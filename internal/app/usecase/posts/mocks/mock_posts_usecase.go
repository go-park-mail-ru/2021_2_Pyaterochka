// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/usecase/posts (interfaces: Usecase)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	io "io"
	models "patreon/internal/app/models"
	repository_files "patreon/internal/microservices/files/files/repository/files"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// PostsUsecase is a mock of Usecase interface.
type PostsUsecase struct {
	ctrl     *gomock.Controller
	recorder *PostsUsecaseMockRecorder
}

// PostsUsecaseMockRecorder is the mock recorder for PostsUsecase.
type PostsUsecaseMockRecorder struct {
	mock *PostsUsecase
}

// NewPostsUsecase creates a new mock instance.
func NewPostsUsecase(ctrl *gomock.Controller) *PostsUsecase {
	mock := &PostsUsecase{ctrl: ctrl}
	mock.recorder = &PostsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PostsUsecase) EXPECT() *PostsUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *PostsUsecase) Create(arg0 *logrus.Entry, arg1 *models.CreatePost) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *PostsUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PostsUsecase)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *PostsUsecase) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *PostsUsecaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*PostsUsecase)(nil).Delete), arg0)
}

// GetAvailablePosts mocks base method.
func (m *PostsUsecase) GetAvailablePosts(arg0 int64, arg1 *models.Pagination) ([]models.AvailablePost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePosts", arg0, arg1)
	ret0, _ := ret[0].([]models.AvailablePost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePosts indicates an expected call of GetAvailablePosts.
func (mr *PostsUsecaseMockRecorder) GetAvailablePosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePosts", reflect.TypeOf((*PostsUsecase)(nil).GetAvailablePosts), arg0, arg1)
}

// GetCreatorId mocks base method.
func (m *PostsUsecase) GetCreatorId(arg0 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorId", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorId indicates an expected call of GetCreatorId.
func (mr *PostsUsecaseMockRecorder) GetCreatorId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorId", reflect.TypeOf((*PostsUsecase)(nil).GetCreatorId), arg0)
}

// GetPost mocks base method.
func (m *PostsUsecase) GetPost(arg0, arg1 int64, arg2 bool) (*models.PostWithAttach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.PostWithAttach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *PostsUsecaseMockRecorder) GetPost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*PostsUsecase)(nil).GetPost), arg0, arg1, arg2)
}

// GetPosts mocks base method.
func (m *PostsUsecase) GetPosts(arg0, arg1 int64, arg2 *models.Pagination, arg3 bool) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *PostsUsecaseMockRecorder) GetPosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*PostsUsecase)(nil).GetPosts), arg0, arg1, arg2, arg3)
}

// LoadCover mocks base method.
func (m *PostsUsecase) LoadCover(arg0 io.Reader, arg1 repository_files.FileName, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCover", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadCover indicates an expected call of LoadCover.
func (mr *PostsUsecaseMockRecorder) LoadCover(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCover", reflect.TypeOf((*PostsUsecase)(nil).LoadCover), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *PostsUsecase) Update(arg0 *logrus.Entry, arg1 *models.UpdatePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *PostsUsecaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*PostsUsecase)(nil).Update), arg0, arg1)
}
